import type { ActorInitQueryBase } from '@comunica/actor-init-query';
import { QueryEngineBase } from '@comunica/actor-init-query';
import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
import type { MediatorHttp } from '@comunica/bus-http';
import type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';
import { ActorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';
import type { IActorArgs, IActorTest } from '@comunica/core';
import type { IActionContext } from '@comunica/types';
import type * as ShEx from 'shexj';
import { Algebra } from 'sparqlalgebrajs';
import { ShapeTree } from './ShapeTree';
/**
 * A comunica Shapetrees RDF Metadata Extract Actor.
 */
export declare class ActorRdfMetadataExtractShapetrees extends ActorRdfMetadataExtract {
    static readonly IRI_SHAPETREE = "http://www.w3.org/ns/shapetrees#ShapeTreeLocator";
    static readonly IRI_SHAPETREE_OLD = "http://shapetrees.org/#ShapeTree";
    readonly mediatorDereferenceRdf: MediatorDereferenceRdf;
    readonly mediatorHttp: MediatorHttp;
    readonly queryEngine: QueryEngineBase;
    constructor(args: IActorRdfMetadataExtractShapetreesArgs);
    test(action: IActionRdfMetadataExtract): Promise<IActorTest>;
    run(action: IActionRdfMetadataExtract): Promise<IActorRdfMetadataExtractOutput>;
    /**
     * Extracts the shape tree locator URL from the headers
     * @param headers A headers record object
     */
    discoverShapeTreeLocator(headers?: Headers): string | undefined;
    /**
     * Fetch all shapetrees identified by the given shape tree locator.
     * @param shapeTreeLocatorUrl A shape tree locator URL.
     * @param context An action context.
     */
    fetchShapeTreesLocatorShapeTrees(shapeTreeLocatorUrl: string, context: IActionContext): Promise<string[]>;
    /**
     * Dereference the given shape tree.
     * @param shapeTreeReference A shape tree URL.
     * @param baseUrl The base URL for URI templates.
     * @param context An action context.
     */
    dereferenceShapeTrees(shapeTreeReference: string, baseUrl: string, context: IActionContext): Promise<ShapeTree[]>;
    /**
     * Dereference a shape
     * @param shapeIri The URL of a shape definition.
     * @param context An action context.
     */
    dereferenceShape(shapeIri: string, context: IActionContext): Promise<ShEx.Shape>;
    /**
     * Check if the given shape tree matches with the current pattern in the global query.
     * @param shapeTree A shape tree to match with the query and pattern.
     * @param query The original query that is being executed.
     * @param pattern The current pattern that is being evaluated and traversed in.
     */
    shapeTreeMatchesQuery(shapeTree: ShapeTree, query: Algebra.Operation, pattern: Algebra.Operation): boolean;
}
export interface IActorRdfMetadataExtractShapetreesArgs extends IActorArgs<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput> {
    /**
     * An init query actor that is used to query shapes.
     * @default {<urn:comunica:default:init/actors#query>}
     */
    actorInitQuery: ActorInitQueryBase;
    /**
     * The Dereference RDF mediator
     */
    mediatorDereferenceRdf: MediatorDereferenceRdf;
    /**
     * The HTTP mediator
     */
    mediatorHttp: MediatorHttp;
}
