import type { ActorInitQueryBase } from '@comunica/actor-init-query';
import { QueryEngineBase } from '@comunica/actor-init-query';
import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
import type { IActionExtractLinks, IActorExtractLinksOutput } from '@comunica/bus-extract-links';
import { ActorExtractLinks } from '@comunica/bus-extract-links';
import type { ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';
import type { IActorArgs, IActorTest } from '@comunica/core';
import type { IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import { Algebra } from 'sparqlalgebrajs';
/**
 * A comunica Solid Type Index Extract Links Actor.
 */
export declare class ActorExtractLinksSolidTypeIndex extends ActorExtractLinks {
    static readonly RDF_TYPE = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
    private readonly typeIndexPredicates;
    private readonly onlyMatchingTypes;
    readonly mediatorDereferenceRdf: MediatorDereferenceRdf;
    readonly queryEngine: QueryEngineBase;
    constructor(args: IActorExtractLinksSolidTypeIndexArgs);
    test(action: IActionExtractLinks): Promise<IActorTest>;
    run(action: IActionExtractLinks): Promise<IActorExtractLinksOutput>;
    /**
     * Extract links to type index from the metadata stream.
     * @param metadata A metadata quad stream.
     */
    extractTypeIndexLinks(metadata: RDF.Stream): Promise<string[]>;
    /**
     * Determine all entries within the given type index.
     * @param typeIndex The URL of a type index.
     * @param context The context.
     * @return typeLinks A record mapping class URLs to an array of links.
     */
    dereferenceTypeIndex(typeIndex: string, context: IActionContext): Promise<Record<string, ILink[]>>;
    /**
     * Determine all links that match with the current query pattern.
     * @param typeLinks The type index links.
     * @param query The original query that is being executed.
     * @param pattern The current pattern that is being evaluated and traversed in.
     */
    getLinksMatchingQuery(typeLinks: Record<string, ILink[]>, query: Algebra.Operation, pattern: Algebra.Operation): Promise<ILink[]>;
}
export interface IActorExtractLinksSolidTypeIndexArgs extends IActorArgs<IActionExtractLinks, IActorTest, IActorExtractLinksOutput> {
    /**
     * The type index predicate URLs that will be followed.
     * @default {http://www.w3.org/ns/solid/terms#publicTypeIndex}
     * @default {http://www.w3.org/ns/solid/terms#privateTypeIndex}
     */
    typeIndexPredicates: string[];
    /**
     * If only those type index entries matching with the current query should be considered.
     * If false, all links within the type index entries will be followed.
     * @default {true}
     */
    onlyMatchingTypes: boolean;
    /**
     * An init query actor that is used to query shapes.
     * @default {<urn:comunica:default:init/actors#query>}
     */
    actorInitQuery: ActorInitQueryBase;
    /**
     * The Dereference RDF mediator
     */
    mediatorDereferenceRdf: MediatorDereferenceRdf;
}
